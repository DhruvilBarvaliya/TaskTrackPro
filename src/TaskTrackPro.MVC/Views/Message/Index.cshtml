@{
    ViewData["Title"] = "Chat Page";
    @* Layout="../Shared/_TaskTrackProLayout.cshtml"; *@
}

<div class="chat-container">
    <h2>Chat with</h2>
    <select name="users" id="users" class="form-control">
        <option value="" selected disabled>-- Select User/Admin --</option>
    </select>

    <select name="online-users" id="online-users" class="form-control">
        <option value="" selected disabled>-- Online Users --</option>
    </select>

    <div id="chatBox" class="chat-box"></div> 

    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type a message..." class="form-control" />
        <button id="sendBtn" class="btn btn-primary">Send</button>
    </div>
</div>

<!-- SignalR & jQuery -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
    @* let userId = sessionStorage.getItem("userEmail"); *@
            let userId = "dhruvil@gmail.com";
        let otherUserId = "";

        if (!userId) {
            alert("User not logged in. Redirecting to login page.");
            window.location.href = "/Login";
            return;
        }

        let connection = new signalR.HubConnectionBuilder()
            .withUrl(`http://localhost:5136/chathub?userId=${userId}`)
            .configureLogging(signalR.LogLevel.Information)
            .build();


        connection.start()
            .then(() => console.log("Connected to SignalR"))
            .catch(err => console.error("SignalR Connection Error:", err));


        function loadUsers() {
            $.ajax({
                url: "http://localhost:5136/api/Admin/users",
                type: "GET",
                success: function (response) {
                    if (!response.success) {
                        console.error("Error loading users:", response.message);
                        return;
                    }
                    let usersDropdown = $("#users");
                    usersDropdown.empty().append('<option value="" selected disabled>-- Select User/Admin --</option>');

                    response.users.forEach((user) => {
                        let option = `<option value="${user.c_Email}">${user.c_Email}</option>`;
                        usersDropdown.append(option);
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Failed to load users. Error:", error);
                }
            });
        }
        function loadOnlineUsers() {
            $.ajax({
                url: "http://localhost:5136/api/Chat/GetOnlineUsers",
                type: "GET",
                success: function (response) {
                    if (!response.success) {
                        console.error("Error loading online users:", response.message);
                        return;
                    }
                    let usersDropdown = $("#online-users");
                    usersDropdown.empty().append('<option value="" selected disabled>-- Online Users --</option>');

                    response.onlineUsers.forEach((user) => {
                        let option = `<option value="${user}" disabled>${user}</option>`;
                        usersDropdown.append(option);
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Failed to load online users. Error:", error);
                }
            });
        }
        $("#users").change(function () {
            otherUserId = $(this).val();
            loadMessages();
        });

        function loadMessages() {
            if (!otherUserId) return;

            $.ajax({
                url: "http://localhost:5136/api/chat/history",
                type: "GET",
                data: { userId: userId, otherUserId: otherUserId },
                success: function (response) {
                    console.log(response);
                    if (!response.success) {
                        console.error("Error loading chat:", response.message);
                        return;
                    }

                    let chatBox = $("#chatBox");
                    chatBox.empty();
                    let lastDate = "";

                    response.data.forEach(msg => {
                        let messageDate = new Date(msg.timestamp).toLocaleDateString();
                        let messageTime = new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                        if (messageDate !== lastDate) {
                            chatBox.append(`<div class="date-separator">${messageDate}</div>`);
                            lastDate = messageDate;
                        }

                        let isSender = msg.senderId === userId;
                        let messageHtml = `<div class="message ${isSender ? 'sent' : 'received'}">` +
                            `<p><b>${isSender ? "You" : msg.senderId}:</b> ${msg.content} <sub class="msg-time">${messageTime}</sub></p></div>`;

                        chatBox.append(messageHtml);
                    });

                    chatBox.scrollTop(chatBox[0].scrollHeight);
                },
                error: function (xhr, status, error) {
                    console.error("Failed to load chat messages. Error:", error);
                }
            });
        }

        loadUsers();
        loadOnlineUsers();
        connection.on("ReceiveMessage", function (senderId, message) {
            if (senderId !== otherUserId && senderId !== userId) return;

            let messageTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            let isSender = senderId === userId;
            let messageHtml = `<div class="message ${isSender ? 'sent' : 'received'}">` +
                `<p><b>${isSender ? "You" : senderId}:</b> ${message} <sub class="msg-time">${messageTime}</sub></p></div>`;

            $("#chatBox").append(messageHtml);
            $("#chatBox").scrollTop($("#chatBox")[0].scrollHeight);
        });

        $("#sendBtn").click(function () {
            let message = $("#messageInput").val().trim();
            if (!message) {
                alert("Message cannot be empty!");
                return;
            }
            if (!otherUserId) {
                alert("Please select a user before sending a message.");
                return;
            }

            let messageTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            $.ajax({
                url: "http://localhost:5136/api/chat/send",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ senderId: userId, receiverId: otherUserId, content: message }),
                success: function () {
                    let messageHtml = `<div class="message sent">` +
                        `<p><b>You:</b> ${message} <sub class="msg-time">${messageTime}</sub></p></div>`;
                    $("#chatBox").append(messageHtml);
                    $("#messageInput").val("");
                    $("#chatBox").scrollTop($("#chatBox")[0].scrollHeight);
                },
                error: function (xhr) {
                    alert("Message failed to send. Server response: " + xhr.responseText);
                    console.error("Chat send error:", xhr.responseText);
                }
            });

            connection.invoke("SendMessage", userId, otherUserId, message)
                .catch(err => console.error("SignalR SendMessage Error:", err));
        });
    });
</script>

<style>
    .chat-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 10px;
        border-radius: 10px;
        background: #f8f9fa;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

    .chat-box {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        background: #fff;
    }

    .message {
        max-width: 75%;
        padding: 8px 12px;
        margin: 5px;
        border-radius: 10px;
        word-wrap: break-word;
    }

    .sent {
        background: #dcf8c6;
        float: right;
        text-align: right;
        clear: both;
    }

    .received {
        background: #ffffff;
        float: left;
        text-align: left;
        border: 1px solid #ccc;
        clear: both;
    }

    .date-separator {
        text-align: center;
        font-size: 12px;
        color: #888;
        margin: 10px 0;
    }

    .msg-time {
        font-size: 10px;
        color: #666;
    }
</style>
